{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to uzgeo","text":"<p>A python package for geospatial analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Younguz.github.io/uzgeo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>This package provides a convenient interface for creating interactive maps with various layers and controls, making it suitable for tasks ranging from simple visualization to more complex geospatial analysis within Jupyter environments in geospatial.</li> <li>This package also contains some functions that can quickly solve mathematical problems, and provides examples of various functions to help you use this package.</li> <li>Streamlit app: https://uz-demo.streamlit.app/Interactive_Map</li> <li>Video introduction: https://www.youtube.com/watch?v=6WOE2eW9Q0w</li> </ul>"},{"location":"#use","title":"Use","text":"<ul> <li>This package will focus on mathematical and statistical calculations, combining maps and data to calculate and infer conclusions. </li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#uzgeo.common.calculate_average","title":"<code>calculate_average(sequence)</code>","text":"<p>Calculate the average value of a sequence.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>list or tuple</code> <p>The sequence of numbers.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The average value of the sequence.</p> Source code in <code>uzgeo/common.py</code> <pre><code>def calculate_average(sequence):\n    \"\"\"\n    Calculate the average value of a sequence.\n\n    Args:\n        sequence (list or tuple): The sequence of numbers.\n\n    Returns:\n        float: The average value of the sequence.\n    \"\"\"\n    if not sequence:\n        return None  # Return None for empty sequence\n\n    total = sum(sequence)\n    average = total / len(sequence)\n    return average\n</code></pre>"},{"location":"common/#uzgeo.common.forecast_sequence","title":"<code>forecast_sequence(sequence, forecast_periods=5, lag=1)</code>","text":"<p>Forecast the next values in a sequence using a simple autoregressive model.</p> <p>Parameters:</p> Name Type Description Default <code>sequence</code> <code>array-like</code> <p>Sequence of numbers.</p> required <code>forecast_periods</code> <code>int</code> <p>Number of periods to forecast.</p> <code>5</code> <code>lag</code> <code>int</code> <p>Lag order for the autoregressive model.</p> <code>1</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>Forecasted values.</p> Source code in <code>uzgeo/common.py</code> <pre><code>def forecast_sequence(sequence, forecast_periods=5, lag=1):\n    \"\"\"\n    Forecast the next values in a sequence using a simple autoregressive model.\n\n    Args:\n        sequence (array-like): Sequence of numbers.\n        forecast_periods (int): Number of periods to forecast.\n        lag (int): Lag order for the autoregressive model.\n\n    Returns:\n        np.ndarray: Forecasted values.\n    \"\"\"\n    # Convert the sequence to numpy array\n    sequence = np.array(sequence)\n\n    # Initialize the forecasted values list with the original sequence\n    forecasted_values = sequence.tolist()\n\n    # Fit autoregressive model\n    for i in range(forecast_periods):\n        # Slice the sequence for the lag order\n        X = sequence[-lag:]\n\n        # Calculate the next value using the mean of the last 'lag' values\n        next_value = np.mean(X)\n\n        # Append the next value to the forecasted values\n        forecasted_values.append(next_value)\n\n        # Update the sequence by appending the next value\n        sequence = np.append(sequence, next_value)\n\n    return np.array(forecasted_values)\n</code></pre>"},{"location":"common/#uzgeo.common.generate_random_points","title":"<code>generate_random_points(num_points, min_lat, max_lat, min_long, max_long)</code>","text":"<p>Generate random points on a map within the specified latitude and longitude range.</p> <ul> <li>num_points (int): The number of random points to generate.</li> <li>min_lat (float): The minimum latitude.</li> <li>max_lat (float): The maximum latitude.</li> <li>min_long (float): The minimum longitude.</li> <li>max_long (float): The maximum longitude.</li> </ul> <ul> <li>List of tuples: Each tuple contains the latitude and longitude of a random point.</li> </ul> Source code in <code>uzgeo/common.py</code> <pre><code>def generate_random_points(num_points, min_lat, max_lat, min_long, max_long):\n    \"\"\"\n    Generate random points on a map within the specified latitude and longitude range.\n\n    Args:\n    - num_points (int): The number of random points to generate.\n    - min_lat (float): The minimum latitude.\n    - max_lat (float): The maximum latitude.\n    - min_long (float): The minimum longitude.\n    - max_long (float): The maximum longitude.\n\n    Returns:\n    - List of tuples: Each tuple contains the latitude and longitude of a random point.\n    \"\"\"\n    random_points = []\n    for _ in range(num_points):\n        lat = random.uniform(min_lat, max_lat)\n        long = random.uniform(min_long, max_long)\n        random_points.append((lat, long))\n    return random_points\n</code></pre>"},{"location":"common/#uzgeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>uzgeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#uzgeo.common.solve_linear_equation","title":"<code>solve_linear_equation(a, b)</code>","text":"<p>Solve a linear equation of the form ax + b = 0.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>Coefficient of the variable.</p> required <code>b</code> <code>float</code> <p>Constant term.</p> required <p>Returns:</p> Type Description <code>float</code> <p>The solution for the variable x.</p> Source code in <code>uzgeo/common.py</code> <pre><code>def solve_linear_equation(a, b):\n    \"\"\"\n    Solve a linear equation of the form ax + b = 0.\n\n    Args:\n        a (float): Coefficient of the variable.\n        b (float): Constant term.\n\n    Returns:\n        float: The solution for the variable x.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a linear equation.\")\n\n    return -b / a\n</code></pre>"},{"location":"common/#uzgeo.common.sum_of_sequence","title":"<code>sum_of_sequence(sequence)</code>","text":"<p>Calculate the sum of a sequence.</p> <p>sequence (list): A list of numbers.</p> Source code in <code>uzgeo/common.py</code> <pre><code>def sum_of_sequence(sequence):\n    \"\"\"\n    Calculate the sum of a sequence.\n\n    Args:\n    sequence (list): A list of numbers.\n\n    Returns:\n    float: The sum of the numbers in the sequence.\n    \"\"\"\n    total = 0\n    for num in sequence:\n        total += num\n    return total\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Younguz/uzgeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>uzgeo could always use more documentation, whether as part of the official uzgeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Younguz/uzgeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up uzgeo for local development.</p> <ol> <li> <p>Fork the uzgeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/uzgeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv uzgeo\n$ cd uzgeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 uzgeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Younguz/uzgeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install uzgeo, run this command in your terminal:</p> <pre><code>pip install uzgeo\n</code></pre> <p>This is the preferred method to install uzgeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install uzgeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Younguz/uzgeo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use uzgeo in a project:</p> <pre><code>import uzgeo\n</code></pre>"},{"location":"uzgeo/","title":"uzgeo module","text":"<p>Main module.</p>"},{"location":"uzgeo/#uzgeo.uzgeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>uzgeo/uzgeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image.\n            bounds (list): The bounds of the image.\n            name (str, optional): The name of the layer. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider(\n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to be added.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_basemap_selection(map_instance):\n        \"\"\"Adds a dropdown for selecting basemaps, an HTTP URL search bar, and a button to close the dropdown.\"\"\"\n\n        if not hasattr(map_instance, \"_basemap_dropdown\") or not hasattr(map_instance, \"_close_button\") or not hasattr(map_instance, \"_url_input\"):\n            basemap_options = {\n            \"OpenStreetMap\": basemaps.OpenStreetMap.Mapnik,\n            \"OpenTopoMap\": basemaps.OpenTopoMap,\n            \"Esri.WorldImagery\": basemaps.Esri.WorldImagery,\n            \"CartoDB.DarkMatter\": basemaps.CartoDB.DarkMatter\n        }\n        map_instance._basemap_dropdown = widgets.Dropdown(options=list(basemap_options.keys()), description=\"Basemaps\")\n        map_instance._url_input = widgets.Text(placeholder='Enter HTTP URL', description='URL:')\n        map_instance._close_button = widgets.Button(description=\"Close\")\n\n        def on_basemap_change(change):\n            map_instance.clear_layers()\n            map_instance.add_layer(basemap_options[change.new])\n\n        def on_url_submit(sender):\n            custom_url = map_instance._url_input.value\n            if custom_url:\n                map_instance.clear_layers()\n                map_instance.add_layer(basemap.CustomTileLayer(url=custom_url))\n\n        def close_dropdown(b):\n            map_instance._basemap_dropdown.close()\n            map_instance._url_input.close()\n            map_instance._close_button.close()\n\n        map_instance._basemap_dropdown.observe(on_basemap_change, names='value')\n        map_instance._url_input.on_submit(on_url_submit)\n        map_instance._close_button.on_click(close_dropdown)\n\n        map_instance.add_control(WidgetControl(widget=map_instance._basemap_dropdown, position=\"topright\"))\n        map_instance.add_control(WidgetControl(widget=map_instance._url_input, position=\"topright\"))\n        map_instance.add_control(WidgetControl(widget=map_instance._close_button, position=\"topright\"))\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_basemap_selection","title":"<code>add_basemap_selection(map_instance)</code>","text":"<p>Adds a dropdown for selecting basemaps, an HTTP URL search bar, and a button to close the dropdown.</p> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_basemap_selection(map_instance):\n    \"\"\"Adds a dropdown for selecting basemaps, an HTTP URL search bar, and a button to close the dropdown.\"\"\"\n\n    if not hasattr(map_instance, \"_basemap_dropdown\") or not hasattr(map_instance, \"_close_button\") or not hasattr(map_instance, \"_url_input\"):\n        basemap_options = {\n        \"OpenStreetMap\": basemaps.OpenStreetMap.Mapnik,\n        \"OpenTopoMap\": basemaps.OpenTopoMap,\n        \"Esri.WorldImagery\": basemaps.Esri.WorldImagery,\n        \"CartoDB.DarkMatter\": basemaps.CartoDB.DarkMatter\n    }\n    map_instance._basemap_dropdown = widgets.Dropdown(options=list(basemap_options.keys()), description=\"Basemaps\")\n    map_instance._url_input = widgets.Text(placeholder='Enter HTTP URL', description='URL:')\n    map_instance._close_button = widgets.Button(description=\"Close\")\n\n    def on_basemap_change(change):\n        map_instance.clear_layers()\n        map_instance.add_layer(basemap_options[change.new])\n\n    def on_url_submit(sender):\n        custom_url = map_instance._url_input.value\n        if custom_url:\n            map_instance.clear_layers()\n            map_instance.add_layer(basemap.CustomTileLayer(url=custom_url))\n\n    def close_dropdown(b):\n        map_instance._basemap_dropdown.close()\n        map_instance._url_input.close()\n        map_instance._close_button.close()\n\n    map_instance._basemap_dropdown.observe(on_basemap_change, names='value')\n    map_instance._url_input.on_submit(on_url_submit)\n    map_instance._close_button.on_click(close_dropdown)\n\n    map_instance.add_control(WidgetControl(widget=map_instance._basemap_dropdown, position=\"topright\"))\n    map_instance.add_control(WidgetControl(widget=map_instance._url_input, position=\"topright\"))\n    map_instance.add_control(WidgetControl(widget=map_instance._close_button, position=\"topright\"))\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#ff0000\", \"fillOpacity\": 0.5}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the layer. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to be added.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"uzgeo/#uzgeo.uzgeo.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>uzgeo/uzgeo.py</code> <pre><code>def add_zoom_slider(\n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"examples/Raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, ImageOverlay\n\nm = Map(center=(25, -115), zoom=4)\n\nimage = ImageOverlay(\n    url=\"https://i.imgur.com/06Q1fSz.png\",\n    # url='../06Q1fSz.png',\n    bounds=((13, -130), (32, -100)),\n)\n\nm.add(image)\nm\n</pre> from ipyleaflet import Map, ImageOverlay  m = Map(center=(25, -115), zoom=4)  image = ImageOverlay(     url=\"https://i.imgur.com/06Q1fSz.png\",     # url='../06Q1fSz.png',     bounds=((13, -130), (32, -100)), )  m.add(image) m  Out[1]: In\u00a0[2]: Copied! <pre>import uzgeo\n</pre> import uzgeo In\u00a0[3]: Copied! <pre>m = uzgeo.Map()\n\nurl = \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXJ2YmozZzAxdzNldnQ2ZjNlYjgzdHdieTNidmgxZWp3dzc5MTdxMSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/cYZkY9HeKgofpQnOUl/source.gif\"\n# url='../06Q1fSz.png',\nbounds = ((13, 100), (45, 130))\nm.add_image(url, bounds)\nm.add_layers_control()\n# m.scroll_wheel_zoom = True\nm\n</pre> m = uzgeo.Map()  url = \"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXJ2YmozZzAxdzNldnQ2ZjNlYjgzdHdieTNidmgxZWp3dzc5MTdxMSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/cYZkY9HeKgofpQnOUl/source.gif\" # url='../06Q1fSz.png', bounds = ((13, 100), (45, 130)) m.add_image(url, bounds) m.add_layers_control() # m.scroll_wheel_zoom = True m Out[3]: In\u00a0[4]: Copied! <pre>from localtileserver import TileClient, get_leaflet_tile_layer, examples\nfrom ipyleaflet import Map\n\n# Create a TileClient from a raster file\nclient = TileClient(\"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\")\n\n# Create ipyleaflet TileLayer from that server\nt = get_leaflet_tile_layer(client)\n# Create ipyleaflet map, add tile layer, and display\nm = Map(center=client.center(), zoom=client.default_zoom)\nm.add(t)\nm\n</pre> from localtileserver import TileClient, get_leaflet_tile_layer, examples from ipyleaflet import Map  # Create a TileClient from a raster file client = TileClient(\"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\")  # Create ipyleaflet TileLayer from that server t = get_leaflet_tile_layer(client) # Create ipyleaflet map, add tile layer, and display m = Map(center=client.center(), zoom=client.default_zoom) m.add(t) m  Out[4]: In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n BoundTileLayer(attribution=\"Raster file served by &lt;a href='https://github.com/banesullivan/localtileserver' target='_blank'&gt;localtileserver&lt;/a&gt;.\", bounds=((37.569444, -122.634858), (37.977799, -122.047091)), max_native_zoom=30, max_zoom=30, options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], show_loading=True, url='http://127.0.0.1:34371/api/tiles/{z}/{x}/{y}.png?&amp;filename=%2Fvsicurl%3Furl%3Dhttps%253A%252F%252Fgithub.com%252Fopengeos%252Fdatasets%252Freleases%252Fdownload%252Fraster%252Flandsat7.tif%26use_head%3Dno%26list_dir%3Dno'))</pre> In\u00a0[6]: Copied! <pre>client.center()\n</pre> client.center() Out[6]: <pre>(37.7736215, -122.34097449999999)</pre> In\u00a0[7]: Copied! <pre>client.default_zoom\n</pre> client.default_zoom Out[7]: <pre>9</pre> In\u00a0[8]: Copied! <pre>m.layers[-1].interact(opacity=(0.0, 1.0, 0.1))\nm.layers[-1].url\nclient.center()\nclient.default_zoom\nm.layers\n</pre> m.layers[-1].interact(opacity=(0.0, 1.0, 0.1)) m.layers[-1].url client.center() client.default_zoom m.layers Out[8]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n BoundTileLayer(attribution=\"Raster file served by &lt;a href='https://github.com/banesullivan/localtileserver' target='_blank'&gt;localtileserver&lt;/a&gt;.\", bounds=((37.569444, -122.634858), (37.977799, -122.047091)), max_native_zoom=30, max_zoom=30, options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], show_loading=True, url='http://127.0.0.1:34371/api/tiles/{z}/{x}/{y}.png?&amp;filename=%2Fvsicurl%3Furl%3Dhttps%253A%252F%252Fgithub.com%252Fopengeos%252Fdatasets%252Freleases%252Fdownload%252Fraster%252Flandsat7.tif%26use_head%3Dno%26list_dir%3Dno'))</pre> In\u00a0[9]: Copied! <pre>m.layers[-1].interact(opacity=(0.0, 1.0, 0.1))\n</pre> m.layers[-1].interact(opacity=(0.0, 1.0, 0.1)) Out[9]:"},{"location":"examples/demo/","title":"Demo","text":"In\u00a0[1]: Copied! <pre>print(\"Hello demo!\")\n</pre> print(\"Hello demo!\") <pre>Hello demo!\n</pre>"},{"location":"examples/dropdownlist/","title":"Dropdownlist","text":"In\u00a0[1]: Copied! <pre>import uzgeo\nfrom uzgeo import Map\n\nmymap = Map(center=(46.0, 14.0), zoom=5)\nmymap.add_basemap_selection()\n\nmymap\n</pre> import uzgeo from uzgeo import Map  mymap = Map(center=(46.0, 14.0), zoom=5) mymap.add_basemap_selection()  mymap Out[1]:"},{"location":"examples/forecast/","title":"Forecast","text":"In\u00a0[1]: Copied! <pre>import uzgeo\n\nfrom uzgeo.common import generate_random_points\n\nrandom_points = generate_random_points(10, 40.0, 41.0, -74.0, -73.0)\n\nprint(random_points)\n</pre> import uzgeo  from uzgeo.common import generate_random_points  random_points = generate_random_points(10, 40.0, 41.0, -74.0, -73.0)  print(random_points) <pre>[(40.10738105312772, -73.95008170087732), (40.00661187317666, -73.92661584348757), (40.54632723816235, -73.22229983342424), (40.67989455004918, -73.85970902593674), (40.97804609609911, -73.4782847856263), (40.32002620346289, -73.73379105553742), (40.60018980702146, -73.37008024557358), (40.641101533396565, -73.88112890006094), (40.88809797181884, -73.49185100416516), (40.26982245840941, -73.15412188702595)]\n</pre> In\u00a0[2]: Copied! <pre>from uzgeo.common import forecast_sequence\n\nsequence = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nforecasted_sequence = forecast_sequence(sequence, forecast_periods=3, lag=2)\nprint(\"Original Sequence:\", sequence)\nprint(\"Forecasted Sequence:\", forecasted_sequence)\n</pre> from uzgeo.common import forecast_sequence  sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9] forecasted_sequence = forecast_sequence(sequence, forecast_periods=3, lag=2) print(\"Original Sequence:\", sequence) print(\"Forecasted Sequence:\", forecasted_sequence) <pre>Original Sequence: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nForecasted Sequence: [1.    2.    3.    4.    5.    6.    7.    8.    9.    8.5   8.75  8.625]\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/introfunction/","title":"Introfunction","text":"<p>Introduction</p> <p>When you want to use a package, use import to load it.</p> In\u00a0[1]: Copied! <pre>import uzgeo\n</pre> import uzgeo <p>Print function</p> <p>When you need to use the print function, use it in this way.</p> In\u00a0[2]: Copied! <pre>print(\"what you want to print\")\n</pre> print(\"what you want to print\") <pre>what you want to print\n</pre> <p>When you are trying to find the mean of a number sequence, check the example/Mean. You can know that how to use the function.</p> <p>This package can help you quickly create previewable maps and focus on anywhere in the world. Check the usage of map class in the example.</p> <p>Conclusion</p> <p>This package can help you quickly import some practical functions and solve some troublesome mathematical and geographical problems.</p>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>import uzgeo\n</pre> import uzgeo  In\u00a0[2]: Copied! <pre>m=uzgeo.Map()\nm\n</pre> m=uzgeo.Map() m Out[2]:"},{"location":"examples/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-05-06 18:26:02.295302\n</pre> In\u00a0[2]: Copied! <pre>person_name = \"Professor\"\n\nprint(f\"Hello {person_name}, how are you doing today?\")\n</pre> person_name = \"Professor\"  print(f\"Hello {person_name}, how are you doing today?\")  <pre>Hello Professor, how are you doing today?\n</pre> In\u00a0[3]: Copied! <pre>person_name = \"John Doe\"\n\nprint(\"Lowercase:\", person_name.lower())\n\nprint(\"Uppercase:\", person_name.upper())\n\nprint(\"Title case:\", person_name.title())\n</pre> person_name = \"John Doe\"  print(\"Lowercase:\", person_name.lower())  print(\"Uppercase:\", person_name.upper())  print(\"Title case:\", person_name.title())  <pre>Lowercase: john doe\nUppercase: JOHN DOE\nTitle case: John Doe\n</pre> In\u00a0[4]: Copied! <pre>quote = \"Life is about meeting and solving problems.\"\nauthor = \"My mother\"\n\nprint(author + \" once said, \" + '\"' + quote + '\"')\n</pre> quote = \"Life is about meeting and solving problems.\" author = \"My mother\"  print(author + \" once said, \" + '\"' + quote + '\"') <pre>My mother once said, \"Life is about meeting and solving problems.\"\n</pre> In\u00a0[5]: Copied! <pre>person_name = \"\\t \\n Yuze Li \\t \\n\"\n\nprint(person_name)\n\nprint(person_name.lstrip())\n\nprint(person_name.rstrip())\n\nprint(person_name.strip())\n</pre> person_name = \"\\t \\n Yuze Li \\t \\n\"  print(person_name)  print(person_name.lstrip())  print(person_name.rstrip())  print(person_name.strip())  <pre>\t \n Yuze Li \t \n\nYuze Li \t \n\n\t \n Yuze Li\nYuze Li\n</pre> In\u00a0[6]: Copied! <pre>names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emily\"]\n\nfor name in names:\n    print(name)\n</pre> names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emily\"]  for name in names:     print(name)  <pre>Alice\nBob\nCharlie\nDavid\nEmily\n</pre> In\u00a0[7]: Copied! <pre>transportation_modes = [\"car\", \"motorcycle\", \"bicycle\", \"plane\", \"train\"]\n\nfor mode in transportation_modes:\n    print(\"I would like to own a\", mode.capitalize() + \".\")\n</pre> transportation_modes = [\"car\", \"motorcycle\", \"bicycle\", \"plane\", \"train\"]  for mode in transportation_modes:     print(\"I would like to own a\", mode.capitalize() + \".\") <pre>I would like to own a Car.\nI would like to own a Motorcycle.\nI would like to own a Bicycle.\nI would like to own a Plane.\nI would like to own a Train.\n</pre> In\u00a0[8]: Copied! <pre>favorite_pizzas = [\"Margherita\", \"Pepperoni\", \"Hawaiian\"]\n\nprint(\"Pizza names:\")\nfor pizza in favorite_pizzas:\n    print(pizza)\n\nprint(\"\\nPizza preferences:\")\nfor pizza in favorite_pizzas:\n    print(\"I like\", pizza, \"pizza.\")\n</pre> favorite_pizzas = [\"Margherita\", \"Pepperoni\", \"Hawaiian\"]  print(\"Pizza names:\") for pizza in favorite_pizzas:     print(pizza)  print(\"\\nPizza preferences:\") for pizza in favorite_pizzas:     print(\"I like\", pizza, \"pizza.\") <pre>Pizza names:\nMargherita\nPepperoni\nHawaiian\n\nPizza preferences:\nI like Margherita pizza.\nI like Pepperoni pizza.\nI like Hawaiian pizza.\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>favorite_pizzas = [\"Margherita\", \"Pepperoni\", \"Hawaiian\"]\n\nfor pizza in favorite_pizzas:\n    print(\"I like\", pizza, \"pizza.\")\n\n\nprint(\"\\nI really love pizza!\")\n</pre> favorite_pizzas = [\"Margherita\", \"Pepperoni\", \"Hawaiian\"]  for pizza in favorite_pizzas:     print(\"I like\", pizza, \"pizza.\")   print(\"\\nI really love pizza!\") <pre>I like Margherita pizza.\nI like Pepperoni pizza.\nI like Hawaiian pizza.\n\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>animals=[\"cat\",\"dog\",\"lion\",\"tiger\"]\nfor a in animals:\n    print(f\"A {a.title()} would make a great pet\")\n</pre> animals=[\"cat\",\"dog\",\"lion\",\"tiger\"] for a in animals:     print(f\"A {a.title()} would make a great pet\") <pre>A Cat would make a great pet\nA Dog would make a great pet\nA Lion would make a great pet\nA Tiger would make a great pet\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>for a in animals:\n    print(f\"A {a.title()} would make a great pet\")\nprint(\"Any of these animals are cute and can be house pets\")\n</pre> for a in animals:     print(f\"A {a.title()} would make a great pet\") print(\"Any of these animals are cute and can be house pets\") <pre>A Cat would make a great pet\nA Dog would make a great pet\nA Lion would make a great pet\nA Tiger would make a great pet\nAny of these animals are cute and can be house pets\n</pre> In\u00a0[12]: Copied! <pre>numbers=list(range(1,101))\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers=list(range(1,101)) print(min(numbers)) print(max(numbers)) print(sum(numbers))  <pre>1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>odd_numbers = list(range(1, 21, 2))\n\nfor number in odd_numbers:\n    print(number)\n</pre> odd_numbers = list(range(1, 21, 2))  for number in odd_numbers:     print(number)  <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>threes=list(range(3,31,3))\nfor three in threes:\n    print(three)\n</pre> threes=list(range(3,31,3)) for three in threes:     print(three) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cubes = [x**3 for x in range(1, 11)]\n\nprint(cubes)\n</pre> cubes = [x**3 for x in range(1, 11)]  print(cubes)  <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n</pre> In\u00a0[16]: Copied! <pre>names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emily\"]\nprint(names[:3])\n</pre> names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Emily\"] print(names[:3]) <pre>['Alice', 'Bob', 'Charlie']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>print(names[1:4])\n</pre> print(names[1:4]) <pre>['Bob', 'Charlie', 'David']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>print(names[2:5])\n</pre> print(names[2:5]) <pre>['Charlie', 'David', 'Emily']\n</pre> In\u00a0[19]: Copied! <pre>foods = (\"Pizza\", \"Burger\", \"Salad\", \"Dumpling\", \"Fries\")\n\nfor food in foods:\n    print(food)\n</pre> foods = (\"Pizza\", \"Burger\", \"Salad\", \"Dumpling\", \"Fries\")  for food in foods:     print(food)  <pre>Pizza\nBurger\nSalad\nDumpling\nFries\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>foods = (\"Sushi\", \"Tacos\", \"Salad\", \"Pasta\", \"Fries\")\n\nprint(\"\\nRevised menu:\")\nfor food in foods:\n    print(food)\n</pre> foods = (\"Sushi\", \"Tacos\", \"Salad\", \"Pasta\", \"Fries\")  print(\"\\nRevised menu:\") for food in foods:     print(food) <pre>\nRevised menu:\nSushi\nTacos\nSalad\nPasta\nFries\n</pre> In\u00a0[21]: Copied! <pre>alien_color = 'green'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n\n\nalien_color = 'yellow'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> alien_color = 'green'  if alien_color == 'green':     print(\"You just earned 5 points!\")   alien_color = 'yellow'  if alien_color == 'green':     print(\"You just earned 5 points!\")  <pre>You just earned 5 points!\n</pre> In\u00a0[22]: Copied! <pre>age = 25\n\nif age &lt; 2:\n    print(\"The person is a baby.\")\nelif age &lt; 4:\n    print(\"The person is a toddler.\")\nelif age &lt; 13:\n    print(\"The person is a kid.\")\nelif age &lt; 20:\n    print(\"The person is a teenager.\")\nelif age &lt; 65:\n    print(\"The person is an adult.\")\nelse:\n    print(\"The person is a senior citizen.\")\n</pre> age = 25  if age &lt; 2:     print(\"The person is a baby.\") elif age &lt; 4:     print(\"The person is a toddler.\") elif age &lt; 13:     print(\"The person is a kid.\") elif age &lt; 20:     print(\"The person is a teenager.\") elif age &lt; 65:     print(\"The person is an adult.\") else:     print(\"The person is a senior citizen.\") <pre>The person is an adult.\n</pre> In\u00a0[23]: Copied! <pre>favorite_fruits = ['banana', 'apple', 'strawberry']\n\nif 'banana' in favorite_fruits:\n    print(\"You really like bananas!\")\n\nif 'apple' in favorite_fruits:\n    print(\"You really like apples!\")\n\nif 'kiwi' in favorite_fruits:\n    print(\"You really like kiwis!\")\n\nif 'strawberry' in favorite_fruits:\n    print(\"You really like strawberries!\")\n\nif 'pineapple' in favorite_fruits:\n    print(\"You really like pineapples!\")\n</pre> favorite_fruits = ['banana', 'apple', 'strawberry']  if 'banana' in favorite_fruits:     print(\"You really like bananas!\")  if 'apple' in favorite_fruits:     print(\"You really like apples!\")  if 'kiwi' in favorite_fruits:     print(\"You really like kiwis!\")  if 'strawberry' in favorite_fruits:     print(\"You really like strawberries!\")  if 'pineapple' in favorite_fruits:     print(\"You really like pineapples!\") <pre>You really like bananas!\nYou really like apples!\nYou really like strawberries!\n</pre> In\u00a0[24]: Copied! <pre>usernames = ['admin', 'jaden', 'emma', 'sam', 'chris', 'sophia']\n\nfor username in usernames:\n    if username == 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {username.capitalize()}, thank you for logging in again.\")\n</pre> usernames = ['admin', 'jaden', 'emma', 'sam', 'chris', 'sophia']  for username in usernames:     if username == 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {username.capitalize()}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Jaden, thank you for logging in again.\nHello Emma, thank you for logging in again.\nHello Sam, thank you for logging in again.\nHello Chris, thank you for logging in again.\nHello Sophia, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = ['john', 'emma', 'sam', 'chris', 'sophia']\nnew_users = ['jaden', 'emma', 'chloe', 'liam', 'sophie']\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")\n    else:\n        print(f\"The username '{new_user}' is available.\")\n</pre> current_users = ['john', 'emma', 'sam', 'chris', 'sophia'] new_users = ['jaden', 'emma', 'chloe', 'liam', 'sophie']  current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"Sorry, the username '{new_user}' is already taken. Please enter a new username.\")     else:         print(f\"The username '{new_user}' is available.\")  <pre>The username 'jaden' is available.\nSorry, the username 'emma' is already taken. Please enter a new username.\nThe username 'chloe' is available.\nThe username 'liam' is available.\nThe username 'sophie' is available.\n</pre> In\u00a0[26]: Copied! <pre>numbers = list(range(1, 10))\n\nfor number in numbers:\n    if number == 1:\n        print(f\"{number}st\")\n    elif number == 2:\n        print(f\"{number}word\")\n    elif number == 3:\n        print(f\"{number}rd\")\n    else:\n        print(f\"{number}th\")\n</pre> numbers = list(range(1, 10))  for number in numbers:     if number == 1:         print(f\"{number}st\")     elif number == 2:         print(f\"{number}word\")     elif number == 3:         print(f\"{number}rd\")     else:         print(f\"{number}th\")  <pre>1st\n2word\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    \"first_name\": \"Yuze\",\n    \"last_name\": \"Li\",\n    \"age\": 24,\n    \"city\": \"Knoxville\"\n}\n\nfor key, value in person_info.items():\n    print(f\"{key}: {value}\")\n</pre> person_info = {     \"first_name\": \"Yuze\",     \"last_name\": \"Li\",     \"age\": 24,     \"city\": \"Knoxville\" }  for key, value in person_info.items():     print(f\"{key}: {value}\")  <pre>first_name: Yuze\nlast_name: Li\nage: 24\ncity: Knoxville\n</pre> In\u00a0[2]: Copied! <pre>favorite_numbers = {\n    \"Ted\": 6,\n    \"Bob\": 2,\n    \"Zed\": 15,\n    \"Allen\": 9,\n    \"Tom\": 13\n}\n\nfor name, number in favorite_numbers.items():\n    print(f\"{name}'s favorite number is {number}\")\n</pre> favorite_numbers = {     \"Ted\": 6,     \"Bob\": 2,     \"Zed\": 15,     \"Allen\": 9,     \"Tom\": 13 }  for name, number in favorite_numbers.items():     print(f\"{name}'s favorite number is {number}\")  <pre>Ted's favorite number is 6\nBob's favorite number is 2\nZed's favorite number is 15\nAllen's favorite number is 9\nTom's favorite number is 13\n</pre> In\u00a0[3]: Copied! <pre>glossary = {\n    \"variable\": \"Contains some known or unknown amounts of information that may be related to each other.\",\n    \"function\": \"A block of organized, reusable code that is used to perform a single, related action.\",\n    \"loop\": \"A programming construct that repeats a group of commands.\",\n    \"dictionary\": \"A collection of key-value pairs and information. \",\n    \"list\": \"An ordered collection of items which is changeable and allows duplicate members.\"\n}\n\nfor term, meaning in glossary.items():\n    print(f\"{term}:\\n    {meaning}\\n\")\n</pre> glossary = {     \"variable\": \"Contains some known or unknown amounts of information that may be related to each other.\",     \"function\": \"A block of organized, reusable code that is used to perform a single, related action.\",     \"loop\": \"A programming construct that repeats a group of commands.\",     \"dictionary\": \"A collection of key-value pairs and information. \",     \"list\": \"An ordered collection of items which is changeable and allows duplicate members.\" }  for term, meaning in glossary.items():     print(f\"{term}:\\n    {meaning}\\n\")  <pre>variable:\n    Contains some known or unknown amounts of information that may be related to each other.\n\nfunction:\n    A block of organized, reusable code that is used to perform a single, related action.\n\nloop:\n    A programming construct that repeats a group of commands.\n\ndictionary:\n    A collection of key-value pairs and information. \n\nlist:\n    An ordered collection of items which is changeable and allows duplicate members.\n\n</pre> In\u00a0[4]: Copied! <pre>glossary.update({\n    \"class\": \"A blueprint for creating objects (a particular data structure), providing initial values for state (member variables) and implementations of behavior (member functions or methods).\",\n    \"inheritance\": \"A mechanism in which one class acquires the properties (methods and fields) of another.\",\n    \"module\": \"A file containing Python definitions and statements. The file name is the module name with the suffix .py added.\",\n    \"generator\": \" A special type of iterator that is defined with a function using the 'yield' keyword. It generates values on the fly and consumes less memory.\",\n    \"syntax\": \"The set of rules that defines the combinations of symbols that are considered to be correctly structured programs in that language.\"\n})\n\nfor term, meaning in glossary.items():\n    print(f\"{term}:\\n    {meaning}\\n\")\n</pre> glossary.update({     \"class\": \"A blueprint for creating objects (a particular data structure), providing initial values for state (member variables) and implementations of behavior (member functions or methods).\",     \"inheritance\": \"A mechanism in which one class acquires the properties (methods and fields) of another.\",     \"module\": \"A file containing Python definitions and statements. The file name is the module name with the suffix .py added.\",     \"generator\": \" A special type of iterator that is defined with a function using the 'yield' keyword. It generates values on the fly and consumes less memory.\",     \"syntax\": \"The set of rules that defines the combinations of symbols that are considered to be correctly structured programs in that language.\" })  for term, meaning in glossary.items():     print(f\"{term}:\\n    {meaning}\\n\")   <pre>variable:\n    Contains some known or unknown amounts of information that may be related to each other.\n\nfunction:\n    A block of organized, reusable code that is used to perform a single, related action.\n\nloop:\n    A programming construct that repeats a group of commands.\n\ndictionary:\n    A collection of key-value pairs and information. \n\nlist:\n    An ordered collection of items which is changeable and allows duplicate members.\n\nclass:\n    A blueprint for creating objects (a particular data structure), providing initial values for state (member variables) and implementations of behavior (member functions or methods).\n\ninheritance:\n    A mechanism in which one class acquires the properties (methods and fields) of another.\n\nmodule:\n    A file containing Python definitions and statements. The file name is the module name with the suffix .py added.\n\ngenerator:\n     A special type of iterator that is defined with a function using the 'yield' keyword. It generates values on the fly and consumes less memory.\n\nsyntax:\n    The set of rules that defines the combinations of symbols that are considered to be correctly structured programs in that language.\n\n</pre> In\u00a0[5]: Copied! <pre>rivers = {\n    \"Nile\": \"Egypt\",\n    \"Amazon\": \"Brazil\",\n    \"Yangtze\": \"China\"\n}\n\nprint(\"Sentences about each river:\")\nfor river, country in rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\n\")\n\nprint(\"Names of the rivers:\")\nfor river in rivers.keys():\n    print(river)\n\nprint(\"\\n\")\n\nprint(\"Names of the countries:\")\nfor country in rivers.values():\n    print(country)\n</pre> rivers = {     \"Nile\": \"Egypt\",     \"Amazon\": \"Brazil\",     \"Yangtze\": \"China\" }  print(\"Sentences about each river:\") for river, country in rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\n\")  print(\"Names of the rivers:\") for river in rivers.keys():     print(river)  print(\"\\n\")  print(\"Names of the countries:\") for country in rivers.values():     print(country)  <pre>Sentences about each river:\nThe Nile runs through Egypt.\nThe Amazon runs through Brazil.\nThe Yangtze runs through China.\n\n\nNames of the rivers:\nNile\nAmazon\nYangtze\n\n\nNames of the countries:\nEgypt\nBrazil\nChina\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    \"Tokyo\": {\n        \"country\": \"Japan\",\n        \"population\": \"13.515 million\",\n        \"fact\": \"The capital of Japan.\"\n    },\n    \"Paris\": {\n        \"country\": \"France\",\n        \"population\": \"2.161 million\",\n        \"fact\": \"The capital of Japan France.\"\n    },\n    \"Washington DC\": {\n        \"country\": \"United States\",\n        \"population\": \"8.419 million\",\n        \"fact\": \"The capital of United States.\"\n    }\n}\n\nfor city, info in cities.items():\n    print(f\"{city}:\")\n    for key, value in info.items():\n        print(f\"  {key.capitalize()}: {value}\")\n    print(\"\\n\")\n</pre> cities = {     \"Tokyo\": {         \"country\": \"Japan\",         \"population\": \"13.515 million\",         \"fact\": \"The capital of Japan.\"     },     \"Paris\": {         \"country\": \"France\",         \"population\": \"2.161 million\",         \"fact\": \"The capital of Japan France.\"     },     \"Washington DC\": {         \"country\": \"United States\",         \"population\": \"8.419 million\",         \"fact\": \"The capital of United States.\"     } }  for city, info in cities.items():     print(f\"{city}:\")     for key, value in info.items():         print(f\"  {key.capitalize()}: {value}\")     print(\"\\n\")  <pre>Tokyo:\n  Country: Japan\n  Population: 13.515 million\n  Fact: The capital of Japan.\n\n\nParis:\n  Country: France\n  Population: 2.161 million\n  Fact: The capital of Japan France.\n\n\nWashington DC:\n  Country: United States\n  Population: 8.419 million\n  Fact: The capital of United States.\n\n\n</pre> In\u00a0[7]: Copied! <pre>rental_car_info = (\"Subaru \")\n\nprint(f\"Let me see if I can find you a {rental_car_info}.\")\n</pre> rental_car_info = (\"Subaru \")  print(f\"Let me see if I can find you a {rental_car_info}.\")  <pre>Let me see if I can find you a Subaru .\n</pre> In\u00a0[8]: Copied! <pre>number_of_people = int(\"9\")\n\nif number_of_people &gt; 8:\n    print(\"You'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")\n</pre> number_of_people = int(\"9\")  if number_of_people &gt; 8:     print(\"You'll have to wait for a table.\") else:     print(\"Your table is ready.\")  <pre>You'll have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>number = int(\"10\")\n\nif number % 10 == 0:\n    print(f\"{number} is a multiple of 10.\")\nelse:\n    print(f\"{number} is not a multiple of 10.\")\n</pre> number = int(\"10\")  if number % 10 == 0:     print(f\"{number} is a multiple of 10.\") else:     print(f\"{number} is not a multiple of 10.\")  <pre>10 is a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>toppings = [\"Tomato\"]\n\nfor topping in toppings:\n    if topping.lower() == 'quit':\n        break\n    print(f\"Adding {topping} to your pizza.\")\n</pre> toppings = [\"Tomato\"]  for topping in toppings:     if topping.lower() == 'quit':         break     print(f\"Adding {topping} to your pizza.\")  <pre>Adding Tomato to your pizza.\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    print(\"In this chapter, I am learning about geo spatial functions in Python.\")\n\ndisplay_message()\n</pre> def display_message():     print(\"In this chapter, I am learning about geo spatial functions in Python.\")  display_message()  <pre>In this chapter, I am learning about geo spatial functions in Python.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\n\nfavorite_book(\"Yashe\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\")  favorite_book(\"Yashe\")  <pre>One of my favorite books is Yashe.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    print(f\"The size of the shirt is {size} and the message printed on it is: '{message}'.\")\n\nmake_shirt('M', 'Nike')\n\nmake_shirt(message='Adidas', size='L')\n</pre> def make_shirt(size, message):     print(f\"The size of the shirt is {size} and the message printed on it is: '{message}'.\")  make_shirt('M', 'Nike')  make_shirt(message='Adidas', size='L')  <pre>The size of the shirt is M and the message printed on it is: 'Nike'.\nThe size of the shirt is L and the message printed on it is: 'Adidas'.\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size='L', message='I love Python.'):\n    print(f\"The size of the shirt is {size} and the message printed on it is: '{message}'.\")\n\nmake_shirt()\n\nmake_shirt(size='M')\n\nmake_shirt(size='S', message='I love coding.')\n</pre> def make_shirt(size='L', message='I love Python.'):     print(f\"The size of the shirt is {size} and the message printed on it is: '{message}'.\")  make_shirt()  make_shirt(size='M')  make_shirt(size='S', message='I love coding.')  <pre>The size of the shirt is L and the message printed on it is: 'I love Python.'.\nThe size of the shirt is M and the message printed on it is: 'I love Python.'.\nThe size of the shirt is S and the message printed on it is: 'I love coding.'.\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country='Iceland'):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city('Reykjavik')\ndescribe_city('Akureyri')\ndescribe_city('Beijing', 'China')\n</pre> def describe_city(city, country='Iceland'):     print(f\"{city} is in {country}.\")  describe_city('Reykjavik') describe_city('Akureyri') describe_city('Beijing', 'China')  <pre>Reykjavik is in Iceland.\nAkureyri is in Iceland.\nBeijing is in China.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nprint(city_country('Santiago', 'Chile'))\nprint(city_country('Paris', 'France'))\nprint(city_country('Tokyo', 'Japan'))\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  print(city_country('Santiago', 'Chile')) print(city_country('Paris', 'France')) print(city_country('Tokyo', 'Japan'))  <pre>Santiago, Chile\nParis, France\nTokyo, Japan\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n    album_dict = {\"artist\": artist_name, \"album\": album_title}\n    if number_of_songs:\n        album_dict[\"songs\"] = number_of_songs\n    return album_dict\n\nalbum1 = make_album(\"The Beatles\", \"Oh my love\")\nalbum2 = make_album(\"Led Zeppelin\", \"Led Zeppelin IV\")\nalbum3 = make_album(\"Pink Floyd\", \"The Dark Side of the Moon\")\n\nprint(album1)\nprint(album2)\nprint(album3)\n\nalbum4 = make_album(\"Nirvana\", \"Nevermind\", number_of_songs=4)\nprint(album4)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):     album_dict = {\"artist\": artist_name, \"album\": album_title}     if number_of_songs:         album_dict[\"songs\"] = number_of_songs     return album_dict  album1 = make_album(\"The Beatles\", \"Oh my love\") album2 = make_album(\"Led Zeppelin\", \"Led Zeppelin IV\") album3 = make_album(\"Pink Floyd\", \"The Dark Side of the Moon\")  print(album1) print(album2) print(album3)  album4 = make_album(\"Nirvana\", \"Nevermind\", number_of_songs=4) print(album4)  <pre>{'artist': 'The Beatles', 'album': 'Oh my love'}\n{'artist': 'Led Zeppelin', 'album': 'Led Zeppelin IV'}\n{'artist': 'Pink Floyd', 'album': 'The Dark Side of the Moon'}\n{'artist': 'Nirvana', 'album': 'Nevermind', 'songs': 4}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n    \"\"\"Build a dictionary containing album information.\"\"\"\n    album_dict = {\"artist\": artist_name, \"album\": album_title}\n    if number_of_songs:\n        album_dict[\"songs\"] = number_of_songs\n    return album_dict\n\nuser_albums = [\n    (\"The Beatles\", \"Oh my love\"),\n    (\"Led Zeppelin\", \"Led Zeppelin IV\"),\n    (\"quit\", \"quit\") \n]\n\nfor artist, title in user_albums:\n    if artist.lower() == 'quit' or title.lower() == 'quit':\n        print(\"See you!\")\n        break\n    else:\n        album = make_album(artist, title)\n        print(album)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):     \"\"\"Build a dictionary containing album information.\"\"\"     album_dict = {\"artist\": artist_name, \"album\": album_title}     if number_of_songs:         album_dict[\"songs\"] = number_of_songs     return album_dict  user_albums = [     (\"The Beatles\", \"Oh my love\"),     (\"Led Zeppelin\", \"Led Zeppelin IV\"),     (\"quit\", \"quit\")  ]  for artist, title in user_albums:     if artist.lower() == 'quit' or title.lower() == 'quit':         print(\"See you!\")         break     else:         album = make_album(artist, title)         print(album)   <pre>{'artist': 'The Beatles', 'album': 'Oh my love'}\n{'artist': 'Led Zeppelin', 'album': 'Led Zeppelin IV'}\nSee you!\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ntext_messages = [\"Hello, how are you?\", \"Goodbye!\", \"Have a great day!\", \"Thank you!.\"]\n\nshow_messages(text_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  text_messages = [\"Hello, how are you?\", \"Goodbye!\", \"Have a great day!\", \"Thank you!.\"]  show_messages(text_messages)  <pre>Hello, how are you?\nGoodbye!\nHave a great day!\nThank you!.\n</pre> In\u00a0[20]: Copied! <pre>def send_messages(messages):\n    sent_messages = []\n    while messages:\n        current_message = messages.pop()\n        print(current_message)\n        sent_messages.append(current_message)\n    return sent_messages\n\ntext_messages = [\"Hello, how are you?\", \"Goodbye!\", \"Have a great day!\", \"Thank you\"]\nsent_messages = send_messages(text_messages[:])\n\nprint(\"\\nOriginal messages:\")\nprint(text_messages)\nprint(\"Sent messages:\")\nprint(sent_messages)\n</pre> def send_messages(messages):     sent_messages = []     while messages:         current_message = messages.pop()         print(current_message)         sent_messages.append(current_message)     return sent_messages  text_messages = [\"Hello, how are you?\", \"Goodbye!\", \"Have a great day!\", \"Thank you\"] sent_messages = send_messages(text_messages[:])  print(\"\\nOriginal messages:\") print(text_messages) print(\"Sent messages:\") print(sent_messages)  <pre>Thank you\nHave a great day!\nGoodbye!\nHello, how are you?\n\nOriginal messages:\n['Hello, how are you?', 'Goodbye!', 'Have a great day!', 'Thank you']\nSent messages:\n['Thank you', 'Have a great day!', 'Goodbye!', 'Hello, how are you?']\n</pre> In\u00a0[21]: Copied! <pre>filename = 'learning_python.txt'\n\nwith open(filename) as file_object:\n    contents = file_object.read()\nprint(\"Reading the entire file at once:\")\nprint(contents)\n\nprint(\"\\nLooping over the file object:\")\nwith open(filename) as file_object:\n    for line in file_object:\n        print(line.rstrip())\n\nprint(\"\\nStoring the lines in a list and working with them outside the 'with' block:\")\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> filename = 'learning_python.txt'  with open(filename) as file_object:     contents = file_object.read() print(\"Reading the entire file at once:\") print(contents)  print(\"\\nLooping over the file object:\") with open(filename) as file_object:     for line in file_object:         print(line.rstrip())  print(\"\\nStoring the lines in a list and working with them outside the 'with' block:\") with open(filename) as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip())  <pre>Reading the entire file at once:\nIn Python you can get a more relaxed programming experience and it will be helpful for you in all aspects. For example, web development, machine learning and artificial intelligence, scripting and automation, software development, and game development.\n\nLooping over the file object:\nIn Python you can get a more relaxed programming experience and it will be helpful for you in all aspects. For example, web development, machine learning and artificial intelligence, scripting and automation, software development, and game development.\n\nStoring the lines in a list and working with them outside the 'with' block:\nIn Python you can get a more relaxed programming experience and it will be helpful for you in all aspects. For example, web development, machine learning and artificial intelligence, scripting and automation, software development, and game development.\n</pre> In\u00a0[22]: Copied! <pre>filename = 'learning_python.txt'\n\nwith open(filename) as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    modified_line = line.replace('Python', 'C')\n    print(modified_line.rstrip())\n</pre> filename = 'learning_python.txt'  with open(filename) as file_object:     lines = file_object.readlines()  for line in lines:     modified_line = line.replace('Python', 'C')     print(modified_line.rstrip())  <pre>In C you can get a more relaxed programming experience and it will be helpful for you in all aspects. For example, web development, machine learning and artificial intelligence, scripting and automation, software development, and game development.\n</pre> In\u00a0[23]: Copied! <pre>user_name = \"Uz\"  \n\nwith open(\"guest.txt\", \"w\") as file:\n    file.write(user_name)\n\nprint(f\"{user_name} has been written to guest.txt.\")\n</pre> user_name = \"Uz\"    with open(\"guest.txt\", \"w\") as file:     file.write(user_name)  print(f\"{user_name} has been written to guest.txt.\")   <pre>Uz has been written to guest.txt.\n</pre> In\u00a0[24]: Copied! <pre>user_names = [\"Alice\", \"Bob\", \"Charlie\"]\n\nfile_path = \"guest_book.txt\"\n\nwith open(file_path, \"a\") as file:  \n    for user_name in user_names:\n        greeting = f\"Hello, {user_name}! Welcome to our event.\"\n        print(greeting) \n        file.write(f\"{user_name}\\n\")\n</pre> user_names = [\"Alice\", \"Bob\", \"Charlie\"]  file_path = \"guest_book.txt\"  with open(file_path, \"a\") as file:       for user_name in user_names:         greeting = f\"Hello, {user_name}! Welcome to our event.\"         print(greeting)          file.write(f\"{user_name}\\n\")  <pre>Hello, Alice! Welcome to our event.\nHello, Bob! Welcome to our event.\nHello, Charlie! Welcome to our event.\n</pre> In\u00a0[25]: Copied! <pre>reasons = [\n    \"convenient.\",\n    \"class requirements\",\n    \"app/web creating\"\n]\n\nfile_path = \"programming_reasons.txt\"\n\nwith open(file_path, \"a\") as file:\n    for reason in reasons:\n        file.write(f\"{reason}\\n\")\n\nprint(f\"Reasons have been added to {file_path}.\")\n</pre> reasons = [     \"convenient.\",     \"class requirements\",     \"app/web creating\" ]  file_path = \"programming_reasons.txt\"  with open(file_path, \"a\") as file:     for reason in reasons:         file.write(f\"{reason}\\n\")  print(f\"Reasons have been added to {file_path}.\")   <pre>Reasons have been added to programming_reasons.txt.\n</pre> In\u00a0[26]: Copied! <pre>def add_numbers():\n    inputs = [(\"4\", \"5\"), (\"three\", \"7\")] \n    \n    for input_pair in inputs:\n        try:\n            num1 = int(input_pair[0])\n            num2 = int(input_pair[1])\n            result = num1 + num2\n            print(f\"The sum of {num1} and {num2} is {result}.\")\n        except ValueError:\n            print(\"Error: Both inputs must be numbers. Please try again.\")\n        \nadd_numbers()\n</pre> def add_numbers():     inputs = [(\"4\", \"5\"), (\"three\", \"7\")]           for input_pair in inputs:         try:             num1 = int(input_pair[0])             num2 = int(input_pair[1])             result = num1 + num2             print(f\"The sum of {num1} and {num2} is {result}.\")         except ValueError:             print(\"Error: Both inputs must be numbers. Please try again.\")          add_numbers()   <pre>The sum of 4 and 5 is 9.\nError: Both inputs must be numbers. Please try again.\n</pre> In\u00a0[27]: Copied! <pre>inputs = [(\"3\", \"4\"), (\"a\", \"5\"), (\"6\", \"b\"), (\"7\", \"8\"), (\"q\",)] \n\nfor input_pair in inputs:\n    try:\n        if len(input_pair) == 1 and input_pair[0].lower() == 'q':\n            print(\"Quitting the program.\")\n            break\n        num1, num2 = map(int, input_pair)\n        print(f\"The sum of {num1} and {num2} is {num1 + num2}.\")\n    except ValueError:\n        print(\"Error: Both inputs must be numbers. Please try again.\")\n</pre> inputs = [(\"3\", \"4\"), (\"a\", \"5\"), (\"6\", \"b\"), (\"7\", \"8\"), (\"q\",)]   for input_pair in inputs:     try:         if len(input_pair) == 1 and input_pair[0].lower() == 'q':             print(\"Quitting the program.\")             break         num1, num2 = map(int, input_pair)         print(f\"The sum of {num1} and {num2} is {num1 + num2}.\")     except ValueError:         print(\"Error: Both inputs must be numbers. Please try again.\")    <pre>The sum of 3 and 4 is 7.\nError: Both inputs must be numbers. Please try again.\nError: Both inputs must be numbers. Please try again.\nThe sum of 7 and 8 is 15.\nQuitting the program.\n</pre> In\u00a0[28]: Copied! <pre>filenames = ['cats.txt', 'dogs.txt']\n\nfor filename in filenames:\n    try:\n        with open(filename) as file_object:\n            print(f\"Contents of {filename}:\")\n            contents = file_object.read()\n            print(contents)\n    except FileNotFoundError:\n        print(f\"Sorry, the file '{filename}' does not exist or cannot be found.\")\n</pre> filenames = ['cats.txt', 'dogs.txt']  for filename in filenames:     try:         with open(filename) as file_object:             print(f\"Contents of {filename}:\")             contents = file_object.read()             print(contents)     except FileNotFoundError:         print(f\"Sorry, the file '{filename}' does not exist or cannot be found.\")  <pre>Contents of cats.txt:\nKiki\n\nGeegee\n\nDongzhi\nContents of dogs.txt:\nDoudou\n\nVicky\n\nBen\n</pre> In\u00a0[29]: Copied! <pre>filenames = ['cats.txt', 'dogs.txt']\n\nfor filename in filenames:\n    try:\n        with open(filename) as file_object:\n            print(f\"Contents of {filename}:\")\n            contents = file_object.read()\n            print(contents)\n    except FileNotFoundError:\n        pass\n</pre> filenames = ['cats.txt', 'dogs.txt']  for filename in filenames:     try:         with open(filename) as file_object:             print(f\"Contents of {filename}:\")             contents = file_object.read()             print(contents)     except FileNotFoundError:         pass  <pre>Contents of cats.txt:\nKiki\n\nGeegee\n\nDongzhi\nContents of dogs.txt:\nDoudou\n\nVicky\n\nBen\n</pre> In\u00a0[30]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[30]: <pre>2</pre> In\u00a0[31]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[31]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[32]: Copied! <pre>def main():\n    text = '''Now the way of life that I preach is a habit to be acquired gradually by long and steady repetition. It is the practice of living for the day only, and for the day's work, Life in day-tight compartments. \"Ah,\" I hear you say, \"that is an easy matter, simple as Elisha's advice!\" Not as I shall urge it, in words which fail to express the depth of my feelings as to its value. I started life in the best of all environments\u2014in a parsonage, one of nine children. A man who has filled Chairs in four universities, has written a successful book, and has been asked to lecture at Yale, is supposed popularly to have brains of a special quality. A few of my intimate friends really know the truth about me, as I know it! Mine, in good faith I say it, are of the most mediocre character. But what about those professorships, etc.? Just habit, a way of life, an outcome of the day's work, the vital importance of which I wish to impress upon you with all the force at my command.'''\n\n    occurrences_nonspace = text.lower().split().count(\"the\")\n\n    print(f\"The word 'the' without spaces appears {occurrences_nonspace} times in the text.\")\n\n    occurrences_space = text.lower().split().count(\" the \")\n\n    print(f\"The word 'the' with spaces appears {occurrences_space} times in the text.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</pre> def main():     text = '''Now the way of life that I preach is a habit to be acquired gradually by long and steady repetition. It is the practice of living for the day only, and for the day's work, Life in day-tight compartments. \"Ah,\" I hear you say, \"that is an easy matter, simple as Elisha's advice!\" Not as I shall urge it, in words which fail to express the depth of my feelings as to its value. I started life in the best of all environments\u2014in a parsonage, one of nine children. A man who has filled Chairs in four universities, has written a successful book, and has been asked to lecture at Yale, is supposed popularly to have brains of a special quality. A few of my intimate friends really know the truth about me, as I know it! Mine, in good faith I say it, are of the most mediocre character. But what about those professorships, etc.? Just habit, a way of life, an outcome of the day's work, the vital importance of which I wish to impress upon you with all the force at my command.'''      occurrences_nonspace = text.lower().split().count(\"the\")      print(f\"The word 'the' without spaces appears {occurrences_nonspace} times in the text.\")      occurrences_space = text.lower().split().count(\" the \")      print(f\"The word 'the' with spaces appears {occurrences_space} times in the text.\")   if __name__ == \"__main__\":     main() <pre>The word 'the' without spaces appears 11 times in the text.\nThe word 'the' with spaces appears 0 times in the text.\n</pre>"},{"location":"examples/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"examples/mean/","title":"Mean","text":"In\u00a0[1]: Copied! <pre>numbers = [1, 5, 5, 6, 7]\n\nmean = sum(numbers) / len(numbers)\n\nprint(\"Mean of the numbers:\", mean)\n</pre> numbers = [1, 5, 5, 6, 7]  mean = sum(numbers) / len(numbers)  print(\"Mean of the numbers:\", mean) <pre>Mean of the numbers: 4.8\n</pre> In\u00a0[2]: Copied! <pre>from uzgeo.common import calculate_average\n\nmean_value = calculate_average(numbers)\n\nprint(\"Mean:\", mean_value)\n</pre> from uzgeo.common import calculate_average  mean_value = calculate_average(numbers)  print(\"Mean:\", mean_value) <pre>Mean: 4.8\n</pre>"},{"location":"examples/vector/","title":"Vector","text":"<p>The function first initializes an empty GeoJSON-like structure (geojson_data) to store the vector data. It then iterates over each item in the provided data. For each item, it constructs a GeoJSON-like feature representation containing information about the feature's properties and geometry. These features are appended to the geojson_data['features'] list. Finally, the constructed GeoJSON data is passed to a method from the uzgeo package to add the vector layer to the map. However, the specific method to add the GeoJSON data to the map is not implemented in this code snippet and needs to be provided externally.</p> In\u00a0[1]: Copied! <pre>def add_vector(data, name=\"Vector\", **kwargs):\n    \"\"\"Adds a vector layer to the map using uzgeo.\n\n    Args:\n        data (list of dict): The vector data. Each dictionary represents a feature.\n        name (str, optional): The name of the layer. Defaults to \"Vector\".\n    \"\"\"\n    geojson_data = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n    }\n\n    for item in data:\n        feature = {\n            \"type\": \"Feature\",\n            \"properties\": {\"City\": item[\"City\"]},\n            \"geometry\": {\n                \"type\": \"Point\",\n                \"coordinates\": [item[\"Longitude\"], item[\"Latitude\"]]\n            }\n        }\n        geojson_data[\"features\"].append(feature)\n</pre> def add_vector(data, name=\"Vector\", **kwargs):     \"\"\"Adds a vector layer to the map using uzgeo.      Args:         data (list of dict): The vector data. Each dictionary represents a feature.         name (str, optional): The name of the layer. Defaults to \"Vector\".     \"\"\"     geojson_data = {         \"type\": \"FeatureCollection\",         \"features\": []     }      for item in data:         feature = {             \"type\": \"Feature\",             \"properties\": {\"City\": item[\"City\"]},             \"geometry\": {                 \"type\": \"Point\",                 \"coordinates\": [item[\"Longitude\"], item[\"Latitude\"]]             }         }         geojson_data[\"features\"].append(feature)"}]}